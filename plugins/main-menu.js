import { xpRange } from '../lib/levelling.js';
import { promises as fs } from 'fs';
import path from 'path';

const AUDIO_PATH = path.resolve('./audiosYuta/audio-menuYuTa.mp3');
// URL opcional de video; se omite al usar lista
// const VIDEO_URL = 'https://cdn.russellxz.click/f630e442.mp4';

// Formato de uptime HH:MM:SS
const clockString = ms => {
  const pad = v => v.toString().padStart(2, '0');
  const h = Math.floor(ms / 3600000);
  const m = Math.floor(ms / 60000) % 60;
  const s = Math.floor(ms / 1000) % 60;
  return [h, m, s].map(pad).join(':');
};

// Separador estilo Jujutsu Kaisen
const sectionDivider = '‡ºí‚úß‡ºí‚úß‡ºí‚úß‡ºí‚úß‡ºí‚úß‡ºí';

// Encabezado tem√°tico de Yuta
const menuHeaderTemplate = `
‚îè‚îÅ„Äé üó°Ô∏è ùöàùöÑùöÉùô∞ ùôæùô∫ùô∫ùôæùöÉùöÇùöÑ üó°Ô∏è „Äè‚îÅ‚îì
‚îÉ üí† Nombre: %name
‚îÉ üí† Nivel: %level | ùëøùë∑: %exp/%max
‚îÉ üí† L√≠mite: %limit | Modo: %mode
‚îÉ üí† Uptime: %uptime
‚îÉ üí† Usuarios: %total
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`.trim();

// Pie tem√°tico con Rika
const menuFooter = 'Invoca a Rika cuando lo necesites. üåÄ';

const emojis = {
  anime: 'üå∏', info: '‚ÑπÔ∏è', search: 'üîé', diversi√≥n: 'üéâ',
  subbots: 'ü§ñ', rpg: 'üåÄ', registro: 'üìù', sticker: 'üé®',
  imagen: 'üñºÔ∏è', logo: 'üñåÔ∏è', configuraci√≥n: '‚öôÔ∏è', premium: 'üíé',
  descargas: 'üì•', herramientas: 'üõ†Ô∏è', nsfw: 'üîû',
  'base de datos': 'üìÄ', audios: 'üîä', 'free fire': 'üî•', otros: 'ü™™'
};
const orderedTags = ['anime','info','search','diversi√≥n','subbots','rpg','registro','sticker','imagen','logo','configuraci√≥n','premium','descargas','herramientas','nsfw','base de datos','audios','free fire','otros'];

const generateHeader = ({ name, level, exp, maxExp, limit, mode, uptime, totalUsers }) =>
  menuHeaderTemplate
    .replace('%name', name)
    .replace('%level', level)
    .replace('%exp', exp)
    .replace('%max', maxExp)
    .replace('%limit', limit)
    .replace('%mode', mode)
    .replace('%uptime', uptime)
    .replace('%total', totalUsers);

const generateMenuBody = (plugins, prefix) => {
  const categories = {};
  for (const plugin of Object.values(plugins)) {
    if (!plugin.help || plugin.disabled) continue;
    const tags = Array.isArray(plugin.tags) ? plugin.tags : [plugin.tags || 'otros'];
    const tag = tags[0];
    categories[tag] = categories[tag] || new Set();
    const helps = Array.isArray(plugin.help) ? plugin.help : [plugin.help];
    helps.forEach(h => categories[tag].add(h));
  }
  return orderedTags
    .filter(tag => categories[tag])
    .map(tag => {
      const emoji = emojis[tag] || '‚ú¶';
      const cmds = [...categories[tag]].map(cmd => `‚Ä¢ ${prefix}${cmd}`);
      return { title: `${emoji} ${tag.toUpperCase()}`, rows: cmds.map(c => ({ title: c, rowId: c })), description: '' };
    });
};

export default async function menuHandler(m, { conn, usedPrefix: prefix }) {
  try {
    const { level = 1, exp = 0, limit = 5 } = global.db?.data?.users?.[m.sender] || {};
    const { min, xp: maxExp } = xpRange(level, global.multiplier || 1);
    const totalUsers = Object.keys(global.db?.data?.users || {}).length;
    const mode = global.opts.self ? 'Privado üîí' : 'P√∫blico üåê';
    const uptime = clockString(process.uptime() * 1000);

    let name = 'Usuario';
    try { name = await conn.getName(m.sender); } catch {};

    const header = generateHeader({ name, level, exp: exp - min, maxExp, limit, mode, uptime, totalUsers });
    const sections = generateMenuBody(global.plugins, prefix);

    // Enviar audio
    try {
      const buffer = await fs.readFile(AUDIO_PATH);
      await conn.sendMessage(m.chat, { audio: buffer, mimetype: 'audio/mpeg', ptt: true }, { quoted: m });
    } catch { console.warn('Audio no disponible'); }

    // Preparar mensaje de lista
    const listMessageContent = {
      title: 'üìú Men√∫ de Comandos',
      text: header,
      footer: menuFooter,
      buttonText: 'Selecciona categor√≠a',
      sections
    };

    // Enviar lista de comandos
    await conn.sendMessage(m.chat, { listMessage: listMessageContent }, { quoted: m });

  } catch (err) {
    console.error('Error en menuHandler:', err);
    await conn.reply(m.chat, '‚ö†Ô∏è Ocurri√≥ un error al generar el men√∫.', m);
  }
}

menuHandler.command = ['menu','help','men√∫'];
menuHandler.help = ['menu','help'];
menuHandler.tags = ['main'];
